{
  "name": "standard",
  "description": "JavaScript Standard Style",
  "version": "2.6.2",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bin": {
    "standard": "./bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/feross/standard/issues"
  },
  "dependencies": {
    "eslint": "^0.14.1",
    "find-root": "^0.1.1",
    "glob": "^4.3.5",
    "jscs": "^1.10.0",
    "minimatch": "^2.0.1",
    "minimist": "^1.1.0",
    "run-parallel": "^1.0.0",
    "split": "^0.3.2",
    "uniq": "^1.0.1",
    "which": "^1.0.8"
  },
  "devDependencies": {
    "extend.js": "0.0.2",
    "mkdirp": "^0.5.0",
    "rimraf": "^2.2.8",
    "run-series": "^1.0.2"
  },
  "homepage": "https://github.com/feross/standard",
  "keywords": [
    "style checker",
    "code style",
    "code checker",
    "code linter",
    "style linter",
    "simple",
    "policy",
    "style",
    "code",
    "lint",
    "jshint",
    "eslint",
    "jscs",
    "hint",
    "enforce",
    "check",
    "verify",
    "standard",
    "quality",
    "checker",
    "code standards",
    "JavaScript Standard Style",
    "standard style"
  ],
  "license": "MIT",
  "main": "index.js",
  "preferGlobal": true,
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/standard.git"
  },
  "scripts": {
    "test": "node ./bin/cmd.js && node ./test.js",
    "which-eslint": "which eslint",
    "which-jscs": "which jscs"
  },
  "standard": {
    "ignore": "tmp/**"
  },
  "readme": "# JavaScript Standard Style\n[![travis][travis-image]][travis-url]\n[![npm][npm-image]][npm-url]\n[![downloads][downloads-image]][downloads-url]\n\n[travis-image]: https://img.shields.io/travis/feross/standard.svg?style=flat\n[travis-url]: https://travis-ci.org/feross/standard\n[npm-image]: https://img.shields.io/npm/v/standard.svg?style=flat\n[npm-url]: https://npmjs.org/package/standard\n[downloads-image]: https://img.shields.io/npm/dm/standard.svg?style=flat\n[downloads-url]: https://npmjs.org/package/standard\n\n### One Style to Rule Them All\n\nNo decisions to make. No `.eslintrc`, `.jscsrc`, or `.jscsrc` files to manage. It just\nworks.\n\nThis module saves you time in two ways:\n\n- **No configuration.** Just drop it in. The easiest way to enforce consistent style in\n  your module/project.\n- **Catch style errors before they're submitted in PRs.** Saves precious code review time\n  by eliminating back-and-forth between maintainer and contributor.\n\n## Install\n\n```bash\nnpm install standard\n```\n\n## Rules\n\n- **2 spaces** for indentation\n- **Single quotes** for strings\n  - Except to avoid escaping like `\"in this lil' string\"`\n- **Unix line breaks** (LF)\n- **No unused variables** (this one catches *so many* bugs and typos!)\n- **No semicolons**\n  - [It's totally][1] [fine.][2] *[Really!][3]*\n- **Never start a line with `(` or `[`**\n  - This is the **only** gotcha with omitting semicolons â€“ *automatically checked for you!*\n  - Always prefix with `;` like this `;[1, 2, 3].join(' ')`\n- Spaces after keywords\n  - `if (condition) { ... }`\n- Spaces before/after function definitions\n  - `function name (arg1, arg2) { ... }`\n- Always name the context variable `self`\n  - `var self = this`\n  - Checks for accidental use of [`window.self`][4] when `var self = this` is omitted\n- Always use `===` instead of `==`\n  - `obj == null` is allowed for succinctness (`obj === null || obj === undefined`)\n- Always handle the node.js `err` function parameter\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://github.com/maxogden/messages/issues/18\n[4]: https://developer.mozilla.org/en-US/docs/Web/API/Window.self\n\nTo get a better idea, take a look at\n[a sample file](https://github.com/feross/bittorrent-dht/blob/master/client.js) written\nin JavaScript Standard Style.\n\n## Usage\n\nThe easiest way to use JavaScript Standard Style to check your code is to install it\nglobally as a Node command line program. To do so, simply run the following command in\nyour terminal (flag `-g` installs `standard` globally on your system, omit it if you want\nto install in the current working directory):\n\n```bash\nnpm install standard -g\n```\n\nAfter you've done that you should be able to use the `standard` program. The simplest use\ncase would be checking the style of all JavaScript files in the current working directory:\n\n```\n$ standard\nError: Code style check failed:\n  lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n```\n\n### Editor plugins\n\nFirst, install `standard`. Then, install the appropriate plugin for your editor:\n\n- **[Vim](https://github.com/scrooloose/syntastic)** - Just install [Syntastic](https://github.com/scrooloose/syntastic).\n- **[Sublime Text](https://github.com/Flet/Sublimelinter-contrib-standard)** - Install (1) [Package Control](https://packagecontrol.io/), (2) [SublimeLinter](http://www.sublimelinter.com/en/latest/), and (3) [SublimeLinter-contrib-standard](https://github.com/Flet/Sublimelinter-contrib-standard).\n\n### What you might do if you're clever\n\n1. Add it to `package.json`\n\n  ```json\n  {\n    \"name\": \"my-cool-package\",\n    \"devDependencies\": {\n      \"standard\": \"*\"\n    },\n    \"scripts\": {\n      \"test\": \"standard && node my-normal-tests.js\"\n    }\n  }\n  ```\n\n2. Check style automatically when you run `npm test`\n\n  ```\n  $ npm test\n  Error: Code style check failed:\n    lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n  ```\n\n3. Never give style feedback on a pull request again!\n\n## FAQ\n\n### Why would I use JavaScript Standard Style?\n\nThe beauty of JavaScript Standard Style is that it's simple. No one wants to maintain\nmultiple hundred-line `.jshintrc` and `.jscsrc` for every module/project they work on.\nEnough of this madness!\n\nThis module saves you time in two ways:\n\n- **No configuration.** Just drop it in. The easiest way to enforce consistent style in\n  your module/project.\n- **Catch style errors before they're submitted in PRs.** Saves precious code review time\n  by eliminating back-and-forth between maintainer and contributor.\n\n### How do I ignore files?\n\nThe paths `node_modules/`, `.git/`, `*.min.js`, `bundle.js`, and `coverage/` are automatically excluded\nwhen looking for `.js` files to style check.\n\nSometimes you need to ignore additional folders or specific minfied files. To do that, add\na `standard.ignore` property to `package.json`:\n\n```json\n\"standard\": {\n  \"ignore\": [\n    \"**/out/**\",\n    \"**/lib/select2/**\",\n    \"**/lib/ckeditor/**\"\n  ]\n}\n```\n\n### Is there an automatic formatter?\n\nYes, try using [Max Ogden](https://github.com/maxogden)'s experimental auto formatter\n**[`standard-format`](https://github.com/maxogden/standard-format)** to fix the easier\ncases.\n\n### How do I hide a certain warning?\n\nIn rare cases, you'll need to break a rule and hide the warning generated by `standard`.\n\nJavaScript Standard Style uses [`eslint`](http://eslint.org/) and\n[`jscs`](http://jscs.info/) under-the-hood and you can hide their warnings as you normally\nwould if you used each linter directly.\n\nTo get verbose output (so you can find the particular rule name to ignore), run:\n\n```bash\n$ standard --verbose\nError: Code style check failed:\n  routes/error.js:20:36: 'file' was used before it was defined. (eslint/no-use-before-define)\n  routes/submit.js:85:2: Expected indentation of 2 characters (jscs/validateIndentation)\n```\n\nThe first error is from `eslint`. In this case, the rule name is \"no-use-before-define\".\nYou can hide it with a `/*eslint-disable no-use-before-define */` comment. Re-enable with\na `/*eslint-enable no-use-before-define */` comment.\n\nExample:\n\n```js\n/*eslint-disable no-use-before-define */\n// offending code here...\n/*eslint-enable no-use-before-define */\n```\n\nThe second error is from `jscs`. In this case, the rule name is \"validateIndentation\".\nYou can hide it with a `// jscs:disable validateIndentation` comment. Re-enable with a\n`// jscs:enable validateIndentation` comment.\n\n### Can you please add more config options?\n\nNo. Use `eslint` or `jscs` directly if you want that.\n\nPro tip: Just use `standard` and move on. There are actual real problems that you could\nspend your time solving :p\n\n### Why can't I pipe standard to other tools?\n\n`standard` prints to `stderr`. This means that tools that read from `stdout` won't be\nable to read its output. The solution is to make `standard` print to `stdout` instead:\n\n```sh\nstandard 2>&1 | grep variable\n```\n\n## License\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "_id": "standard@2.6.2",
  "dist": {
    "shasum": "dd1f1fbaae52edecdf583122038a2f53501a989f"
  },
  "_from": "standard@^2.2.3",
  "_resolved": "https://registry.npmjs.org/standard/-/standard-2.6.2.tgz"
}
